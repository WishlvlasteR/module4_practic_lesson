                                        # MODULE 4 МОДУЛИ И ПАКЕТЫ
                                        # ИМПОРТИРОВАНИЕ МОДУЛЕЙ
#----------------------------------------------------------------------------------------------------------------------#
# Модуль - это любой питоновский файл с расширением .py
# в основном используется для деления большого кода на части, для удобства для того чтоб было легче отслеживать части
# кода, а не весь код целиком и если вылезет ошибка чтоб её не пришлось искать по всему коду. Так же для импортирования
# каких то определенных ф-ий или частей кода которые уже написаны для переноса в другой проект для их использования.

# Для того чтобы импортировать модуль надо написать import и имя файла который будем импортировать
# для обращения к какойто переменной/ф-ии требуется обращаться ИмяМодуля.ИмяФункции/Переменной ПРИМЕР: print(module2.a)
#               где а - это переменная и в ней хранится какое-то значение

# Бывают такие ситуации, что имя модулей очень длинное и для того чтобы их сократить/переназначить используется команда as
# так же с помощью as можно переназначить сокращенное имя каким то ф-иям

# Так же можно подключить какие то ф-ии/переменные или части кода включая их в глобальное пространство имён не импортируя
#   для этого весь модуль нужно использовать немного другую конструкцию импорта : from module2 import a,b,c
#   Где a,b,c это переменные из модуля 2. в таком случае мы импортируем именно переменные/функции, а не весь модуль
#   таким образом при обращении к ним, не нужно будет использовать префикс module2.a таким способом подключаем выборочно
#   какие то функции / переменные / и тд
#   так же если хотим перенсти все переменные/функции в конце import можно поставить * но сдесь есть некоторые ньюансы
#   важно следить за тем что бы не было одинаковых имён потому что будет конфликт
#
# Если требуется не запускать какую то часть кода из модуля в конец модуля добавляем запись :
#     if __name__ == '__main__':
#       main()
#       Основные понятия:
# __name__ — специальная встроенная переменная Python, которая содержит имя текущего модуля.
#     Если файл запускается как основная программа, то значение переменной __name__ будет равно '__main__'.
#     Если файл импортируется как модуль в другой программе, то __name__ будет содержать имя модуля (например, 'module_name').
#if __name__ == '__main__': — это условие проверяет, запущен ли данный файл как основная программа или импортирован как модуль.
    #Зачем это нужно?
    #Разделение кода на модули:
    #Вы можете писать код, который может работать как самостоятельная программа и как импортируемый модуль для других программ.
    #Проверка функциональности:
    #Позволяет тестировать функции и классы внутри файла, не влияя на другие программы, которые импортируют этот файл.
def main():
    print("Это основная программа.")

def add(a, b):
    return a + b

# Проверяем, запущен ли этот файл как программа
if __name__ == '__main__':
    main()
    result = add(2, 3)
    print(f"Сумма: {result}")
#Объяснение этого кода:
#    Функция main():
#    Это основная функция программы. В ней содержится основной код, который будет выполняться при запуске файла.
#    Функция add(a, b):
#    Обычная функция для сложения двух чисел. Она может быть вызвана как из этого файла, так и из другого файла, если модуль импортирован.
#    Условие if __name__ == '__main__'::
#    Проверяет, был ли этот файл запущен напрямую:
#        Если да, выполняется функция main() и последующий код.
#        Если файл импортирован как модуль в другую программу, то блок внутри if __name__ == '__main__': не будет выполняться.

#   Пример использования в другом файле:
#Допустим, у нас есть второй файл import_example.py, где мы импортируем функции из предыдущего файла:
import example  # Импортируем модуль

# Вызываем функцию из модуля
print(example.add(5, 7))
#Что произойдет:
    #Функция main() из файла example.py не выполнится, потому что __name__ в этом случае будет равно 'example', а не '__main__'.
    #Будет выполнен только импорт и вызов функции add.
# Итог:
#  Конструкция if __name__ == '__main__': помогает организовать код так, чтобы он мог работать и как самостоятельная
#    программа, и как модуль для других программ. Это хорошая практика, которая делает код более читаемым, повторно
#                                        используемым и удобным для тестирования.

# всё что пришло позже то и будет использоватсья - это если всё таки есть одинаковые имена
#